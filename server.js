// Generated by CoffeeScript 1.10.0
(function() {
  var T, always, append, apply, base_page_maker, bind, bunyan, curry, drop, equals, flatten, flip, get_url_from_request, h, handle_get_html, handle_scan, handle_scan_html, handle_scan_json, ifElse, join, juxt, log, log_trace, pipe, prepend, prop, redis_get, ref, send_error, send_ok, slice, tap, url, wrap_code;

  url = require('url');

  bunyan = require('bunyan');

  h = require('hyperscript');

  ref = require('ramda'), always = ref.always, append = ref.append, apply = ref.apply, bind = ref.bind, curry = ref.curry, drop = ref.drop, equals = ref.equals, flatten = ref.flatten, flip = ref.flip, ifElse = ref.ifElse, join = ref.join, juxt = ref.juxt, pipe = ref.pipe, prepend = ref.prepend, prop = ref.prop, slice = ref.slice, T = ref.T, tap = ref.tap;

  base_page_maker = require('./base_page')(h);

  get_url_from_request = require('./get_url_from_request');

  handle_scan = require('./scan');

  send_error = require('./send_error');

  send_ok = require('./send_ok');

  log = bunyan.createLogger({
    level: 'trace',
    name: 'server',
    serializers: bunyan.stdSerializers
  });

  log_trace = bind(log.trace, log);

  wrap_code = pipe(flip(append)(['pre']), apply(h));

  handle_get_html = curry(function(redis_client, request, response) {
    var key, send_result;
    log.trace('Started /get/ handler.', {
      req: request
    });
    key = pipe(get_url_from_request.path, drop(5))(request);
    send_result = pipe(wrap_code, base_page_maker, send_ok.html(response));
    return redis_get(redis_client, key)["catch"](send_error.html_500('Redis GET failed.', log, request, response)).then(send_result);
  });

  redis_get = function(client, key) {
    return new Promise(function(resolve, reject) {
      return client.get(key, function(err, result) {
        if (err) {
          return reject(err);
        } else {
          return resolve(result);
        }
      });
    });
  };

  handle_scan_html = handle_scan.html(h);

  handle_scan_json = handle_scan.json(h);

  module.exports = function(redis_client) {
    return function(request, response) {
      var url_path;
      log.trace('Received request.', {
        req: request
      });
      url_path = get_url_from_request.path(request);
      if ('/' === url_path) {
        return handle_scan_html(redis_client, request, response);
      } else if ('/get/' === url_path.slice(0, 5)) {
        return handle_get_html(redis_client, request, response);
      } else if ('/scan.json' === url_path) {
        return handle_scan_json(redis_client, request, response);
      } else {
        return send_error.text_404(request, response);
      }
    };
  };

}).call(this);
