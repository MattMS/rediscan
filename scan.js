// Generated by CoffeeScript 1.10.0
(function() {
  var R, T, always, ap, append, apply, applySpec, bunyan, curry, curryN, equals, flatten, flip, get_body, get_command_from_request, get_count_from_url_query, get_cursor_from_url_query, get_pattern_from_url_query, get_url_from_request, ifElse, join, juxt, log, make_page, nth, pipe, prepend, prop, redis_scan_from_request, scan_html_maker, send_error, send_ok, tap, url;

  url = require('url');

  bunyan = require('bunyan');

  R = require('ramda');

  always = R.always, ap = R.ap, append = R.append, apply = R.apply, applySpec = R.applySpec, curry = R.curry, curryN = R.curryN, equals = R.equals, flatten = R.flatten, flip = R.flip, ifElse = R.ifElse, join = R.join, juxt = R.juxt, nth = R.nth, pipe = R.pipe, prepend = R.prepend, prop = R.prop, T = R.T, tap = R.tap;

  get_url_from_request = require('./get_url_from_request');

  make_page = require('./base_page');

  send_error = require('./send_error');

  send_ok = require('./send_ok');

  log = bunyan.createLogger({
    level: 'trace',
    name: 'scan'
  });

  get_body = curryN(2, function(h, state) {
    var key;
    return h('body', [
      h('form', [
        h('input', {
          name: 'count',
          type: 'hidden',
          value: state.query.count
        }), h('input', {
          name: 'cursor',
          type: 'hidden',
          value: 0
        }), h('label#search_input_wrap', [
          h('span', 'Pattern'), h('input#search_input', {
            name: 'pattern',
            type: 'text',
            value: state.query.pattern
          })
        ]), h('button#search_button', 'Search', {
          type: 'submit'
        })
      ]), h('ul#search_results', [
        (function() {
          var i, len, ref, results;
          ref = state.keys;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            key = ref[i];
            results.push(h('li', [
              h('a', {
                href: "/get/" + key
              }, key)
            ]));
          }
          return results;
        })()
      ]), h('nav#search_nav', [
        h('a', {
          href: url.format({
            query: {
              count: state.query.count,
              cursor: state.next_cursor,
              pattern: state.query.pattern
            }
          })
        }, 'Next')
      ])
    ]);
  });

  get_count_from_url_query = pipe(prop('count'), flip(R.or)(12));

  get_cursor_from_url_query = pipe(prop('cursor'), flip(R.or)(0), parseInt);

  get_pattern_from_url_query = pipe(prop('pattern'), flip(R.or)('*'));

  get_command_from_request = pipe(get_url_from_request.query, juxt([get_cursor_from_url_query, pipe(get_pattern_from_url_query, flip(append)(['MATCH'])), pipe(get_count_from_url_query, flip(append)(['COUNT']))]), flatten);

  redis_scan_from_request = function(client, request) {
    return new Promise(function(resolve, reject) {
      var command;
      command = get_command_from_request(request);
      log.trace("Redis command is `SCAN " + (join(' ', command)) + "`.");
      return client.scan(command, function(err, result) {
        if (err) {
          return reject(err);
        } else {
          return resolve(result);
        }
      });
    });
  };

  scan_html_maker = pipe(ap([get_body, make_page]), apply(pipe));

  module.exports.html = curry(function(h, redis_client, request, response) {
    var fix_scan_result, make_html, make_page_from_scan_result;
    log.trace('Started scan.html handler.', {
      req: request
    });
    fix_scan_result = applySpec({
      keys: nth(1),
      next_cursor: nth(0),
      query: always(get_url_from_request.query(request))
    });
    make_html = scan_html_maker(h);
    make_page_from_scan_result = pipe(fix_scan_result, make_html, send_ok.html(response));
    return redis_scan_from_request(redis_client, request)["catch"](send_error.html_500('Redis SCAN failed.', log, request, response)).then(make_page_from_scan_result);
  });

  module.exports.json = curry(function(redis_client, request, response) {
    log.trace('Started scan.json handler.', {
      req: request
    });
    return redis_scan_from_request(redis_client, request)["catch"](send_error.json_500('Redis SCAN failed.', log, request, response)).then(send_ok.json);
  });

}).call(this);
